'\" -*- coding: us-ascii -*-
.if \n(.g .ds T< \\FC
.if \n(.g .ds T> \\F[\n[.fam]]
.de URL
\\$2 \(la\\$1\(ra\\$3
..
.if \n(.g .mso www.tmac
.TH flashmq.conf 5 "6 May 2024" "" ""
.SH NAME
flashmq.conf \- FlashMQ configuration file format
.SH SYNOPSIS
The \*(T<\fIflashmq.conf\fR\*(T> file is the configuration used for configuring the FlashMQ MQTT broker. It doesn't necessarily have to be called \*(T<\fIflashmq.conf\fR\*(T>; the \fBflashmq\fR daemon program sports a \*(T<\fB\-\-config\-file\fR\*(T> parameter.
.SH "FILE FORMAT"
To set a parameter, its name must appear on a single line, followed by whitespace, followed by the parameter value.
.PP
\*(T<\fBparameter\-name\fR\*(T>
\fIparameter-value\fR
.PP
When setting boolean values, \*(T<yes/no\*(T>, \*(T<true/false\*(T> and \*(T<on/off\*(T> can all be used.
.PP
To configure the listeners, use \*(T<\fBlisten\fR\*(T> blocks, defined by { and }. See EXAMPLE LISTENERS for details.
.PP
Lines beginning with the hash character (\(lq\*(T<#\*(T>\(rq) and empty lines are ignored. Thus, a line can be commented out by prepending a \(lq\*(T<#\*(T>\(rq to it.
.SH "GLOBAL PARAMETERS"
.TP 
\*(T<\fBplugin\fR\*(T> \fI/path/to/plugin.so\fR 
FlashMQ supports an ELF shared object (\*(T<\fI.so\fR\*(T> file) plugin interface to add functionality, authorization and authentication, because it\(cqs hard to provide a declarative mechanism that works for everybody. See \*(T<\fIflashmq_plugin.h\fR\*(T> for the API and its documentation. It\(cqs written in C++ for ease of passing FlashMQ internals without conversion to C, but you can basically just use a C++ compiler and program like it was C; the C++ constructs are simple.

FlashMQ will auto-detect which plugin interface you\(cqre trying to load (Mosquitto version 2 or FlashMQ native). Keep in mind that each thread initializes the plugin, inline with multi-core programming (minimize shared data and interaction between threads). You could use static variables with thread synchronization if you really want to. And of course, any Mosquitto plugin that uses global and/or static variables instead of initializing memory in its \*(T<\fBinit()\fR\*(T> method, will not be thread-safe and won\(cqt work.

You can only have one plugin active, but you can combine it with 
.URL #mosquitto_password_file mosquitto_password_file
and 
.URL #mosquitto_acl_file mosquitto_acl_file
\&. The password and ACL file take precedence, and on a \(oqdeny\(cq, will not ask the plugin.
.TP 
\*(T<\fBplugin_opt_*\fR\*(T> \fIvalue\fR 
Options passed to the plugin \*(T<\fBinit()\fR\*(T> function.
.TP 
\*(T<\fBplugin_serialize_init\fR\*(T> \fItrue/false\fR 
There could be circumstances where the plugin code is mostly thread-safe, but not on initialization. Libmysqlclient for instance, needs a one-time initialization. To add to the confusion, Qt hides that away.

The plugin should preferrably be written with proper synchronization like that, but as a last resort, you can use this to synchronize initialization.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBplugin_serialize_auth_checks\fR\*(T> \fItrue/false\fR 
Like \*(T<\fBplugin_serialize_init\fR\*(T>, but then for all login and ACL checks.

This option may be dropped at some point, because it negates much of the multi-core design. One may as well run with only one thread then.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBplugin_timer_period\fR\*(T> \fIseconds\fR 
The FlashMQ auth plugin interface has a function that is called periodically this amount of seconds. This can be used to refresh state, commit data, etc.

See \*(T<\fIflashmq_plugin.h\fR\*(T> for details.

Default value: \*(T<60\*(T>
.TP 
\*(T<\fBlog_file\fR\*(T> \fI/path/to/flashmq.log\fR 
This configuration parameter sets the path to FlashMQ's log file. If you omit the, the output will go to stdout.

Default value: \*(T<\fI/var/log/flashmq/flashmq.log\fR\*(T>
.TP 
\*(T<\fBlog_level\fR\*(T> \fIinfo/notice/warning/error/none\fR 
Set the log level to specified level and above. That means \fInotice\fR will log \fInotice\fR, \fIwarning\fR and \fIerror\fR.

Use this setting over the deprecated \*(T<\fBlog_debug\fR\*(T> and \*(T<\fBquiet\fR\*(T>. If you do have those directives, they override the \*(T<\fBlog_level\fR\*(T>, for backwards compatability reasons.

Default value: \*(T<info\*(T>.
.TP 
\*(T<\fBlog_debug\fR\*(T> \fItrue/false\fR 
Debug logging obviously creates a lot of log noise, so should only be done to diagnose problems.

Deprecated. Use \*(T<\fBlog_level\fR\*(T> instead.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBlog_subscriptions\fR\*(T> \fItrue/false\fR 
Default value: \*(T<false\*(T>
.TP 
\*(T<\fBallow_unsafe_clientid_chars\fR\*(T> \fItrue/false\fR 
If you have topics with client IDs in it, people can possibly manipulate your ACL checking by saying their client ID is 'John+foobar'. Audit your security before you allow this.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBallow_unsafe_username_chars\fR\*(T> \fItrue/false\fR 
If you have topics with usernames in it, people can possibly manipulate your ACL checking by saying their username is 'John+foobar'. Audit your security before you allow this.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBmax_packet_size\fR\*(T> \fIbytes\fR 
MQTT packets have a maximum size of about 256 MB. This memory will (temporarily) be allocated upon arrival of such packets, so there may be cause to set it lower.

This option works in conjunction with \*(T<\fBclient_max_write_buffer_size\fR\*(T> to limit memory use.

Default value: \*(T<268435461\*(T>
.TP 
\*(T<\fBclient_max_write_buffer_size\fR\*(T> \fIbytes\fR 
The client's write buffer is where packets are stored before the event loop has the chance to flush them out. Any time a client's connection is bad and bytes can't be flushed, this buffer fills. So, there's good reason to limit this to something sensible. A good indication is your average packet size (or better yet, a configured \*(T<\fBmax_packet_size\fR\*(T>) multiplied by the amount of packets you want to be able to buffer.

Note that it's an approximate value and not a hard limit. Buffer sizes only grow by powers of two, and buffers are always allowed to grow to make place for ping packets. Additionally, upon arrival of large packets (up to \*(T<\fBmax_packet_size\fR\*(T> bytes), room will be made up to twice their size. So, you may also want to reduce \*(T<\fBmax_packet_size\fR\*(T> from the default.

Default value is \*(T<1048576\*(T> (1 MB)
.TP 
\*(T<\fBclient_initial_buffer_size\fR\*(T> \fIbytes\fR 
The buffers for reading and writing, also for websockets when relevant, start out with a particular size and double when they need to grow. If you know your clients send bulks of a particular size, it helps to set this to match, to avoid constant memory reallocation. The default value is set conservatively, for scenario's with millions of clients.

After buffers have grown, they are eventually reset to their original size when possible.

Also see \*(T<\fBclient_max_write_buffer_size\fR\*(T> and \*(T<\fBmax_packet_size\fR\*(T>.

Value must be a power of two.

Default value: \*(T<1024\*(T>
.TP 
\*(T<\fBmosquitto_password_file\fR\*(T> \fI/foo/bar/mosquitto_password_file\fR 
File with usernames and hashed+salted passwords as generated by Mosquitto's \fBmosquitto_passwd\fR.

Mosquitto up to version 1.6 uses the sha512 algorithm. Newer version use sha512-pbkdf2. Both are supported.
.TP 
\*(T<\fBmosquitto_acl_file\fR\*(T> \fI/foo/bar/mosquitto_acl_file\fR 
ACL (access control lists) for users, anonymous users and patterns expandable with %u (username) and %c (clientid). Format is Mosquitto's acl_file.
.TP 
\*(T<\fBallow_anonymous\fR\*(T> \fItrue/false\fR 
This option can be overriden on a per-listener basis; see 
.URL #listen__allow_anonymous listener.allow_anonymous
\&.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBzero_byte_username_is_anonymous\fR\*(T> \fItrue/false\fR 
The proper way to signal an anonymous client is by setting the 'username present' flag in the CONNECT packet to 0, which in MQTT3 also demands the absence of a password. However, there are also clients out there that set the 'username present' flag to 1 and then give an empty username. This is an undesirable situation, because it means there are two ways to identify an anonymous client.

Anonymous clients are not authenticated against a loaded plugin when \*(T<\fBallow_anonymous\fR\*(T> is true. With this option enabled, that means users with empty string as usernames also aren't.

With this option disabled, clients connecting with an empty username will be reject with 'bad username or password' as MQTT error code.

The default is to be unambigious, but this can be overridden with this option.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBrlimit_nofile\fR\*(T> \fInumber\fR 
The general Linux default of \*(T<1024\*(T> can be overridden. Note: \*(T<systemd\*(T> blocks you from setting it, so it needs to be set on the unit. The default systemd unit file sets \*(T<\fBLimitNOFILE=infinity\fR\*(T>. You may also need to set \*(T<\fBsysctl \-w fs.file\-max=10000000\fR\*(T>

Default value: \*(T<1000000\*(T>
.TP 
\*(T<\fBexpire_sessions_after_seconds\fR\*(T> \fIseconds\fR 
Expire sessions after this time. Setting to 0 disables it and is (MQTT3) standard-compliant. But, existing sessions cause load on the server (because they cost memory and are still subscribers), so keeping sessions after any client that connects with a random ID doesn't make sense.

Default value: \*(T<1209600\*(T>
.TP 
\*(T<\fBquiet\fR\*(T> \fItrue/false\fR 
Don't log LOG_INFO and LOG_NOTICE. This is useful when you have a lot of foot traffic, because otherwise the log gets filled with connect/disconnect notices.

Deprecated. Use \*(T<\fBlog_level\fR\*(T> instead.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBstorage_dir\fR\*(T> \fI/path/to/dir\fR 
Location to store sessions, subscriptions and retained messages.
Not specifying this will turn off persistence.
.TP 
\*(T<\fBmax_qos_msg_pending_per_client\fR\*(T> , \*(T<\fBmax_qos_bytes_pending_per_client\fR\*(T> 
There is a limit to how many QoS packets can be stored in a session, so you can define a maximum amount of messages and bytes. If any of these is exceeded, the packet is dropped.

Defaults:
.RS 
.TP 0.2i
\(bu
max_qos_msg_pending_per_client 512
.TP 0.2i
\(bu
max_qos_bytes_pending_per_client 65536
.RE
.TP 
\*(T<\fBmax_incoming_topic_alias_value\fR\*(T> \fInumber\fR 
Is communicated towards MQTT5 clients. It is then up to them to decide to set them or not.

Changing this setting and reloading the config only has effect on new clients, because existing clients would otherwise exceed the limit they think applies.

Default value: \*(T<65535\*(T>
.TP 
\*(T<\fBmax_outgoing_topic_alias_value\fR\*(T> \fInumber\fR 
FlashMQ will make this many aliases per MQTT5 client, if they ask for aliases (with the connect property \*(T<\fBTopicAliasMaximum\fR\*(T>).

Default value: \*(T<65535\*(T>
.TP 
\*(T<\fBthread_count\fR\*(T> \fInumber\fR 
If you want to have a different amount of worker threads then CPUs, you can set this value. Typically you don't need to set this.

Default value: \*(T<\fIauto\-detect\fR\*(T>
.TP 
\*(T<\fBwills_enabled\fR\*(T> \fItrue/false\fR 
When disabled, the server will not set last will and testament specified by connecting clients.

Default value: \*(T<\fItrue\fR\*(T>
.TP 
\*(T<\fBretained_messages_mode\fR\*(T> \fIenabled/downgrade/drop/disconnect_with_error\fR 
Retained messages can be a strain on the server you may not need. You can set various ways of dealing with them:

\*(T<\fIenabled\fR\*(T>. This is normal operation.

\*(T<\fIdowngrade\fR\*(T>. The retain flag is removed and treated like a normal publish.

\*(T<\fIdrop\fR\*(T>. Messages with retain set are dropped.

\*(T<\fIdisconnect_with_error\fR\*(T>. Disconnect clients who try to set them.

Default value: \*(T<\fIenabled\fR\*(T>
.TP 
\*(T<\fBexpire_retained_messages_after_seconds\fR\*(T> \fIseconds\fR 
Use this to limit the life time of retained messages. Without this, the amount of retained messages may never decrease.

Default value: \*(T<\fI4294967296\fR\*(T>
.TP 
\*(T<\fBretained_messages_delivery_limit\fR\*(T> \fInumber\fR 
Deprecated.
.TP 
\*(T<\fBretained_messages_node_limit\fR\*(T> \fInumber\fR 
When clients place a subscription, they will get the retained messages matching that subscription. Even though traversing the retained message tree is deprioritized in favor of other traffic, it will still cause CPU load until it's done. If you have a tree with millions of nodes and clients subscribe to `#`, this is potentially unwanted. You can use this setting to limit how many nodes of the retrained tree are traversed. 

Note that the topic `one/two/three` is three nodes, and each node doesn't necessarilly need to contain a message.

Default value: \*(T<\fI4294967296\fR\*(T>
.TP 
\*(T<\fBwebsocket_set_real_ip_from\fR\*(T> \fIinet4_address/inet6_address\fR 
HTTP proxies in front of the websocket listeners can set the \fIX-Real-IP\fR header to identify the original connecting client. With \*(T<\fBwebsocket_set_real_ip_from\fR\*(T> you can mark IP networks as trusted. By default, clients are not trusted, to avoid spoofing.

You can repeat the option to allow for multiple addresses. Valid notations are \fI1.2.3.4\fR, \fI1.2.3.4/16\fR, \fI1.2.0.0/16\fR, \fI2a01:1337::1\fR, \fI2a01:1337::1/64\fR, etc.

The header \fIX-Forwarded-For\fR is not used, because that's designed to contain a list of addresses, if applicable.

As a side note about using a proxy on your listener; you can only have an absolute max of 65535 connections to an IP+port combination (and the practical limit is lower). If you need more, you have to set up multiple listeners. This can be multiple IP addresses, or simply multiple ports.
.TP 
\*(T<\fBshared_subscription_targeting\fR\*(T> \fIround_robin/sender_hash\fR 
When having multiple subscribers on a shared subscription (like '$share/myshare/jane/doe'), select how the messages should be distributed over the subscribers.

\fIround_robin\fR. Select the next subscriber for each message. There is still some amount of randomness to it because the counter for this is not thread safe. Using an atomic/mutexed counter for it would just be too slow to justify.

\fIsender_hash\fR. Selects a receiver deterministically based on the hash of the client ID of the sender. The selected subscriber will depend on how many subscribers there are, so if some disconnect, the distribution will change. Moreover, the selection may also change when FlashMQ cleans up empty spaces in the list of shared subscribers.

Default: \fIround_robin\fR
.TP 
\*(T<\fBminimum_wildcard_subscription_depth\fR\*(T> \fInumber\fR 
Defines the minimum level of the first wildcard topic filter (\*(T<\fB#\fR\*(T> and \*(T<\fB+\fR\*(T>). In a topic filter like \*(T<\fBsensors/temperature/#\fR\*(T>, that is 2. If you specify 2, a subscription to \*(T<\fBsensors/#\fR\*(T> will be denied. Remember that only MQTT 3.1.1 and newer actually notify the client of the denial in the sub-ack packet.

The reason you may want to limit it, is performance. If you have a base message load of 100,000 messages per second, each client subscribing to \*(T<\fB#\fR\*(T> causes that many permission checks per second. If you have 100 clients doing that, there will be 10 million permission checks per second.

Default: \fI0\fR
.TP 
\*(T<\fBwildcard_subscription_deny_mode\fR\*(T> \fIdeny_all/deny_retained_only\fR 
For \*(T<\fBminimum_wildcard_subscription_depth\fR\*(T>, specify what you want to deny. Trying to give a client all retained messages can cause quite some load, so only denying the retained messages upon receiving a broad wildcard subscription can be useful if you have a low enough general message volume, but a high number of retained messages. 

Default: \*(T<deny_all\*(T>
.TP 
\*(T<\fBoverload_mode\fR\*(T> \fIlog/close_new_clients\fR 
Define the action to perform when the value defined with \*(T<\fBmax_event_loop_drift\fR\*(T> is exceeded.

When a server is (re)started, and hundreds of thousands of clients connect, the SSL handshaking and authenticating can be so heavy that it doesn't get to clients in time. They will then reconnect and try again, and get stuck in a loop. This option is to mitigate that. With \*(T<close_new_clients\*(T>, new clients will be closed immediately after connecting while the server is overloaded. This will allow the worker threads to process the new clients in a controlled manner.

For really large deployments, this can be augmented with extra rate limiting in iptables, or other firewalls. A stateless method is preferred, like: \*(T<iptables \-I INPUT \-p tcp \-m multiport \-\-dports 8883,1883 \-\-syn \-m hashlimit \-\-hashlimit\-name newmqttconns \-\-hashlimit\-above 10000/second \-\-hashlimit\-burst 15000 \-j DROP\*(T>

The current default is \*(T<log\*(T>, but that will likely change in the future.

Default: \*(T<log\*(T>
.TP 
\*(T<\fBmax_event_loop_drift\fR\*(T> \fImilliseconds\fR 
For \*(T<\fBoverload_mode\fR\*(T>, the maximum permissible thread drift before the overload action is taken.

The drift values considered are those of the main loop, in which clients are accepted, and the median of all worker threads.

Default: \*(T<2000\*(T>
.TP 
\*(T<\fBinclude_dir\fR\*(T> \fI/path/to/dir\fR 
Load *.conf files from the specified directory, to merge with the main configuration file.

An error is generated when the directory is not there. This is to protect against running incorrect configurations by accident, when the dir has been renamed, for example.
.SH "LISTEN PARAMETERS"
Listen parameters can only be used within \*(T<listen { }\*(T> blocks.
.TP 
\*(T<\fBport\fR\*(T> 
The default port depends on the \*(T<\fBprotocol\fR\*(T> parameter and whether or not \*(T<\fBfullchain\fR\*(T> and \*(T<\fBprivkey\fR\*(T> parameters are supplied:
.RS 
.TP 0.2i
\(bu
For unencrypted MQTT, the default port is \*(T<1883\*(T>
.TP 0.2i
\(bu
For encrypted MQTT, the default port is \*(T<8883\*(T>
.TP 0.2i
\(bu
For plain HTTP websockets, the default port is \*(T<8080\*(T>
.TP 0.2i
\(bu
For encrypted HTTPS websockets, the default port is \*(T<4443\*(T>
.RE
.TP 
\*(T<\fBprotocol\fR\*(T> 
Valid values:

\*(T<mqtt\*(T>
.br
\*(T<websockets\*(T>
.TP 
\*(T<\fBinet_protocol\fR\*(T> 
Valid values:

\*(T<ip4_ip6\*(T>
.br
\*(T<ip4\*(T>
.br
\*(T<ip6\*(T>

Default: ip4_ip6
.TP 
\*(T<\fBinet4_bind_address\fR\*(T> \fIinet4address\fR 
Default: 0.0.0.0
.TP 
\*(T<\fBinet6_bind_address\fR\*(T> \fIinet6address\fR 
Default: ::0
.TP 
\*(T<\fBfullchain\fR\*(T> \fI/foobar/server.crt\fR 
Specifying a chain makes the listener SSL, and also requires the \*(T<\fBprivkey\fR\*(T> to be set.
.TP 
\*(T<\fBprivkey\fR\*(T> \fI/foobar/server.key\fR 
Specifying a private key makes the listener SSL, and also requires the \*(T<\fBfullchain\fR\*(T> to be set.
.TP 
\*(T<\fBclient_verification_ca_file\fR\*(T> \fI/foobar/client_authority.crt\fR 
Clients can be authenticated using X509 certificates, and the username taken from the CN (common name) field. Use this directive to specify the certificate authority you trust.

Specifying this or \*(T<\fBclient_verification_ca_dir\fR\*(T> will require the listener to be TLS.
.TP 
\*(T<\fBclient_verification_ca_dir\fR\*(T> \fI/foobar/dir_with_certificates\fR 
Clients can be authenticated using X509 certificates, and the username taken from the CN (common name) field. Use this directive to specify the dir containing certificate authorities you trust.

Note that the filename requirements are dictated by OpenSSL. Use the utility \fBopenssl rehash /path/to/dir\fR.

Specifying this or \*(T<\fBclient_verification_ca_file\fR\*(T> will require the listener to be TLS.
.TP 
\*(T<\fBclient_verification_still_do_authn\fR\*(T> \fItrue/false\fR 
When using X509 client authentication with \*(T<\fBclient_verification_ca_file\fR\*(T> or \*(T<\fBclient_verification_ca_dir\fR\*(T>, the username will not be checked with a user database or a plugin by default. Set this option to \*(T<true\*(T> to override that.
.TP 
\*(T<\fBallow_anonymous\fR\*(T> \fItrue/false\fR 
This allows you to override the 
.URL #allow_anonymous "global allow_anonymous"
setting on the listener level.
.TP 
\*(T<\fBhaproxy\fR\*(T> \fItrue/false\fR 
Setting the listener to haproxy makes it expect the PROXY protocol and set client source address to the original client. Make sure this listener is private / firewalled, otherwise anybody can set a different source address.

Note that HAProxy's server health checks only started using the 'local' specifier as of version 2.4. This means earlier version will pretend to be a client and break the connection, causing log spam.

As a side note about using a proxy on your listener; you can only have an absolute max of 65535 connections to an IP+port combination (and the practical limit is lower). If you need more, you have to set up multiple listeners. This can be multiple IP addresses, or simply multiple ports.

See 
.URL http://www.haproxy.org/ haproxy.org
\&.
.TP 
\*(T<\fBtcp_nodelay\fR\*(T> \fItrue/false\fR 
Default: \fIfalse\fR

\*(T<\fBtcp_nodelay\fR\*(T> will cause the \*(T<TCP_NODELAY\*(T> option to be set for the listener's socket(s), and therefore for all clients accepted on that listener.

\*(T<TCP_NODELAY\*(T> is a OS TCP-layer option that will cause messages written by FlashMQ to the socket to be flushed immediately, without letting Nagle's algorithm (the default) collect small outgoing TCP packets into bigger packets.

Foregoing Nagle's algorithm by setting \*(T<\fBtcp_nodelay\fR\*(T> to \fItrue\fR\ \fImay\fR decrease latency, at the likely cost of some network efficiency.
.SH "EXAMPLE LISTENERS"
.nf
listen {
  protocol mqtt
  inet_protocol ip4_ip6
  inet4_bind_address 127.0.0.1
  inet6_bind_address ::1
  fullchain /foobar/server.crt
  privkey /foobar/server.key

  # default = 8883
  port 8883
}
listen {
  protocol mqtt
  fullchain /foobar/server.crt
  privkey /foobar/server.key
  client_verification_ca_file /foobar/client_authority.crt
  client_verification_still_do_authn false
}
listen {
  protocol mqtt
  inet_protocol ip4

  # default = 1883
  port 1883
}
listen {
  protocol websockets
  fullchain /foobar/server.crt
  privkey /foobar/server.key

  # default = 4443
  port 4443
}
listen {
  protocol websockets

  # default = 8080
  port 8080
}
listen {
  port 2883
  haproxy on
}
.fi
.SH "BRIDGE CONFIGURATION"
Bridges can be defined inside \*(T<bridge { }\*(T> blocks. A bridge is essentially just an outgoing connection to another server with loop-detection and retain flag relaying. It is not a form of clustering. Also note that one bridge is one connection, and because FlashMQ's threading model is that clients are serviced by one selected thread only, a bridge has the potential to saturate a thread, if it's heavily loaded. You could work around that by defining multiple bridges to the same server, for various topic paths. A future version of FlashMQ will likely improve upon this.
.PP
Bridges are dynamically created, removed or changed upon config reload. When a bridge configuration changes, it will disconnect and reconnect.
.TP 
\*(T<\fBaddress\fR\*(T> \fIaddress\fR 
The DNS name, IPv4 or IPv6 address of the server you want to connect to.
.TP 
\*(T<\fBport\fR\*(T> \fInumber\fR 
The default port depends on the \*(T<\fBtls\fR\*(T> option, either 1883 or 8883.
.TP 
\*(T<\fBinet_protocol\fR\*(T> \fIip4_ip6/ip4/ip6\fR 
Default: \*(T<ip4_ip6\*(T>
.TP 
\*(T<\fBtls\fR\*(T> \fIoff/on/unverified\fR 
Set TLS mode. The value \*(T<\fBunverified\fR\*(T> means the x509 chain is not verified.
.TP 
\*(T<\fBca_file\fR\*(T> \fIpath\fR 
File to be used for x509 certificate chain validation.
.TP 
\*(T<\fBca_dir\fR\*(T> \fIpath\fR 
Directory containing certificates for x509 certificate chain validation.
.TP 
\*(T<\fBprotocol_version\fR\*(T> \fImqtt3.1/mqtt3.1.1/mqtt5\fR 
Default: \*(T<mqtt3.1.1\*(T>
.TP 
\*(T<\fBbridge_protocol_bit\fR\*(T> \fItrue/false\fR 
An unofficial standard is to set the most significant bit of the protocol version byte to 1 to signal the connection is a bridge. This allows the other side to alter its behavior slightly. However, this is not always supported, so you can disable this if you get disconnected for reporting an invalid protocol version.

This setting has no effect when using MQTT5, because the behavior it influences is done with subscription options.

Default: \*(T<true\*(T>
.TP 
\*(T<\fBkeepalive\fR\*(T> \fIseconds\fR 
The time between sending ping packets to the other side.

Default: \*(T<60\*(T>
.TP 
\*(T<\fBclientid_prefix\fR\*(T> \fIprefix\fR 
The prefix of the randomly generated client ID. Client IDs cannot be explicitely set for security reasons. See 
.URL https://www.flashmq.org/2022/11/26/understanding-clean-session-and-clean-start/ "Understanding clean session and clean start"
\&.

Default: \*(T<fmqbridge\*(T>
.TP 
\*(T<\fBpublish\fR\*(T> \fIfilter\fR \fIqos\fR 
Messages matching this filter will be published to the other side. Examples: \*(T<#\*(T> or \*(T<sport/tennis/#\*(T>. This option can be repeated several times.

The QoS value should be seen as the QoS value of the internal subscription causing outgoing messages. Messages that are relayed have this QoS level at most.

Default: \*(T<0\*(T>
.TP 
\*(T<\fBsubscribe\fR\*(T> \fIfilter\fR \fIqos\fR 
Subscriptions for this filter is placed at the other side. Examples: \*(T<#\*(T> or \*(T<sport/tennis/#\*(T>. This option can be repeated several times.

The QoS value is like any subscription at a server. Messages received by the other end will be given this QoS level at most.

Default: \*(T<0\*(T>
.TP 
\*(T<\fBlocal_username\fR\*(T> \fIusername\fR 
Username as seen by the local FlashMQ's plugin or ACL checks. This is not always necessary.
.TP 
\*(T<\fBremote_username\fR\*(T> \fIusername\fR 
Username sent to the remote connection.
.TP 
\*(T<\fBremote_password\fR\*(T> \fIpassword\fR 
Password sent to the remote connection.
.TP 
\*(T<\fBremote_clean_start\fR\*(T> \fItrue/false\fR 
In MQTT3, this means 'clean session', meaning the remote server removes any existing session with the same ID on (re)connect, and destroys it immediately on disconnect. If you want reuseable sessions that survive disconnects, set this to false. If you also want to pick up remote sessions on FlashMQ restart, set \*(T<\fBuse_saved_clientid\fR\*(T> to true.

In MQTT5, this option only influences reconnection behavior. It essentially has no effect on the first connect, because the client ID is random and will always be new (except when you set \*(T<\fBuse_saved_clientid\fR\*(T>). But when set to true, any reconnects, which do use the already generated client ID, will destroy the session and in-flight messages will be lost.

Also see 
.URL https://www.flashmq.org/2022/11/26/understanding-clean-session-and-clean-start/ "understanding clean session and clean start"
\&.

Default value: \*(T<true\*(T>
.TP 
\*(T<\fBlocal_clean_start\fR\*(T> \fItrue/false\fR 
In MQTT3 mode, this means 'clean session' and means the session is removed upon disconnect. If you want to reuse sessions on reconnect, set this to false. Any new start of FlashMQ will give you a new client ID so will always be a fresh session, except if you set \*(T<\fBuse_saved_clientid\fR\*(T>.

In MQTT5 mode, this has no effect. If you want the session to be removed immediately on disconnect, use \*(T<\fBlocal_session_expiry_interval\fR\*(T> to 0.

Also see 
.URL https://www.flashmq.org/2022/11/26/understanding-clean-session-and-clean-start/ "understanding clean session and clean start"
\&.

Default value: \*(T<true\*(T>
.TP 
\*(T<\fBremote_session_expiry_interval\fR\*(T> \fIseconds\fR 
Is only used in MQTT5 mode and determines the amount of seconds after which the session can be removed from the remote server.

Default value: \*(T<0\*(T>
.TP 
\*(T<\fBlocal_session_expiry_interval\fR\*(T> \fIseconds\fR 
Determines when a local session without an active client will be removed, in both MQTT3 and MQTT5 mode. Note that in MQTT3 mode, the session is removed on disconnect when \*(T<\fBlocal_clean_start\fR\*(T> is true.

Default value: \*(T<0\*(T>
.TP 
\*(T<\fBremote_retain_available\fR\*(T> \fItrue/false\fR 
MQTT5 allows a server to tell a client it doesn't support retained messages, or has it disabled. When using MQTT3, use this option to achieve the same.

Messages will not be relayed with 'retained as published' and the retained messages that are normally sent on matching subscription, are not sent.

Default value: \*(T<true\*(T>
.TP 
\*(T<\fBuse_saved_clientid\fR\*(T> \fItrue/false\fR 
When you want your bridges to resume local and remote sessions after restart, set this to true and set \*(T<\fBremote_clean_start\fR\*(T>, \*(T<\fBlocal_clean_start\fR\*(T>, \*(T<\fBremote_session_expiry_interval\fR\*(T> and \*(T<\fBlocal_session_expiry_interval\fR\*(T> accordingly. It only has effect when you have set a \*(T<\fBstorage_dir\fR\*(T>.

It is important to fully understand the clean session / clean start behavior and the role the client ID plays in that. The primary goal of sessions is to survive link disconnects. Configuring a fixed client ID and use that each time an MQTT client starts, is often an anti-pattern, because most clients like actual IoT devices start fresh upon restart and don't store their sessions (with in-flight packets, etc) to disk. FlashMQ does store it on disk however, so it can be used legitamately. However, you can run into unexpected situations. For instance, you will get your existing subscriptions from the session too. So, if you remove a \*(T<\fBsubscribe\fR\*(T> line from your bridge configuration and restart, it will actually have no effect, because the server on the other side still has that subscription in the session.

See 
.URL https://www.flashmq.org/2022/11/26/understanding-clean-session-and-clean-start/ "understanding clean session and clean start"
for details.

Default value: \*(T<false\*(T>
.TP 
\*(T<\fBmax_outgoing_topic_aliases\fR\*(T> \fIamount\fR 
If you want FlashMQ to initiate topic aliases for this bridge, set this to a non-zero value. Note that it's floored to the value the remote side gives in the CONNACK packet, so it only works if the other side permits it.

Default: \*(T<0\*(T>
.TP 
\*(T<\fBmax_incoming_topic_aliases\fR\*(T> \fIamount\fR 
If you want to accept topic aliases for this bridge, set this to a non-zero value. The value is set in the CONNECT packet to inform the remote side of the wish. It's not guaranteed that the other side will actually make aliases.

Default: \*(T<0\*(T>
.TP 
\*(T<\fBtcp_nodelay\fR\*(T> \fItrue/false\fR 
Default: \fIfalse\fR

\*(T<\fBtcp_nodelay\fR\*(T> will cause the \*(T<TCP_NODELAY\*(T> option to be set for the client socket that is used to connect to the other end of the bridge.

See the documentation for the 
.URL #tcp_nodelay tcp_nodelay
\fIlistener\fR parameter for further elaboration.
.SH "EXAMPLE BRIDGE"
.nf
bridge {
    address demo.flashmq.org
    publish send/this
    subscribe receive/this
    local_username my_local_user
    remote_username my_remote_user
    remote_password my_remote_pass
    bridge_protocol_bit false
    tls on
    ca_file /path/to/ca.crt
}
.fi
.SH AUTHOR
Wiebe Cazemier <\*(T<contact@flashmq.org\*(T>>.
.SH "SEE ALSO"
\fBflashmq\fR(1)
.PP
.URL https://www.flashmq.org/ www.flashmq.org
